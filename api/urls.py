from django.contrib import admin
from django.urls import path, include
from . import views


urlpatterns = [
    path('accounts/', include('rest_registration.api.urls')),
    path('shows', views.show_list, name='show_list'),
]


"""
https://django-rest-registration.readthedocs.io/en/latest/detailed_configuration/register.html
Verification workflow

Let’s describe it by example. We’re assuming that:

    the Django REST Registration views are served at https://backend-host/api/v1/accounts/

    you have ‘REGISTER_VERIFICATION_ENABLED’ set to True (this by default)

    you configured ‘REGISTER_VERIFICATION_URL’ to be https://frontend-host/verify-user/

Then the verification workflow looks as follows:

    The user who wants to register itself sends AJAX POST request to https://backend-host/api/v1/accounts/register/ endpoint. Usually this happens via front-end aplication, which could be hosted on https://frontend-host/.

    Assuming the registration was correct, The register endpoint will generate an e-mail which will contain an URL which the newly registered user should click to activate his/her account. the URL would be in a form:

    https://frontend-host/verify-user/?user_id=<user id>&timestamp=<timestamp>&signature=<signature>

    (You can change the way the URL is generated by overriding ‘VERIFICATION_URL_BUILDER’)

    The frontend endpoint (which is not provided by Django REST Registration) https://frontend-host/verify-user/ would receive following GET parameters:

        user_id

        timestamp

        signature

    and then it should perform AJAX request to https://backend-host/api/v1/accounts/verify-registration/ via HTTP POST with following JSON payload:

    {
        "user_id": "<user id>",
        "timestamp": "<timestamp>",
        "signature": "<signature>"
    }

    and then show a message to the user depending on the response from backend server.
"""
